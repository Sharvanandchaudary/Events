June 2 - June 7
Completed onboarding formalities, which included receiving the allocated laptop and desktop systems, and ensuring all required configurations were in place to support development and infrastructure work. Installed and verified a comprehensive set of development tools and environments including Terraform CLI, Python, Git, OpenStack CLI utilities, and supporting shell utilities needed for provisioning and automation tasks. Configured secure access to internal systems, including VPN setup, SSH key management, cloud consoles, and remote work environments to ensure seamless integration with the Nexum project infrastructure.
Received initial access credentials to the necessary project environments, including internal GitHub repositories, infrastructure provisioning portals, and documentation systems. Gained access to multiple deployment targets and cloud interfaces to support local development and testing.
In parallel, regularly attended daily knowledge-sharing sessions led by Sourav, which provided valuable technical insights into chamber design, provisioning pipelines, and deployment standards followed in the organization. Participated in team sync-up calls to stay aligned with current workstreams, infrastructure priorities, and engineering best practices. These interactions helped build a strong foundational understanding of the Nexum project's technical landscape and collaborative workflows.
June 8 – June 14
Focused extensively on developing a strong understanding of the Nexum infrastructure, particularly the Terraform-based provisioning model used for deploying bare metal resources into structured chamber environments. This involved a detailed review of the existing codebase, terraform modules, variable hierarchies, and execution workflows that control the automated deployment process.
Worked closely with Jan to configure and fine-tune the Terraform setup for the test environment. This included setting up and validating the necessary backend configurations, environment-specific variable files, and dependencies required for successful resource provisioning. Actively participated in deploying a complete chamber setup into the test environment, ensuring all dependencies, network settings, and resource definitions aligned with project requirements.
Gained hands-on experience by directly accessing provisioned nodes via SSH and performing validation steps to confirm successful boot and configuration. Through this process, developed a clear understanding of the role and interdependency of key components such as ls01, haproxy, and wrk01 nodes. Assessed how each of these integrates into the broader Terraform architecture and supports end-to-end functionality within a chamber. This phase was instrumental in building confidence with the infrastructure tooling and gaining practical exposure to the full provisioning lifecycle.
June 15 - June 19
I focused on diagnosing and resolving multiple deployment issues encountered during bare metal provisioning. Several errors were related to image boot failures, which I addressed by testing different OS images, including RHEL 7.2 and RHEL 8.6, across multiple provisioning scenarios. During this time, I also attempted to deploy a chamber without including certain baseline nodes such as ls01 and haproxy. However, the deployment did not succeed due to architectural constraints and tight coupling within the main.tf logic, confirming that a full chamber deployment remains mandatory in the current setup.
To streamline and improve the provisioning process, I developed a Python script capable of dynamically generating the tf.vars.json configuration. This script takes input parameters such as the number of worker nodes and automatically builds the required Terraform structure, significantly reducing manual intervention. Alongside this, I implemented two sample GitHub Actions workflows to automate post-deployment test executions. These workflows integrated with the cloud3testautomationlauncher.sh script, allowing automated validation once the chamber provisioning is complete.
Throughout the week, I continued participating in daily sync-up calls and technical discussions, contributing actively to planning, validation strategies, and provisioning improvements.

 Next week
In the upcoming week, the primary objective will be to explore the feasibility of decoupling ls01 and haproxy nodes from the existing bare metal deployment process. The goal is to assess whether a partial chamber deployment—focused solely on worker nodes—can be achieved without relying on the full baseline node structure.
This will involve analyzing the Terraform modules, dependency mappings, and output references that currently enforce tight coupling between ls01, haproxy, and the worker nodes. The plan is to identify critical dependencies, attempt-controlled modifications to the provisioning flow, and document the impact of these changes on the overall deployment behavior.
As part of this effort, I will conduct multiple dry-run deployments using Terraform with selective exclusion of these components, closely monitor error patterns, and work on resolving any configuration or logical constraints that prevent successful execution. The intention is to make the provisioning logic more modular and flexible, supporting lightweight test deployments without requiring a full chamber setup.
Additionally, I will continue to participate in sync-up discussions and collaborate with team members to validate the approach, gather feedback, and iterate on the solution as needed.
 


