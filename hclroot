locals {
  workspace_name     = basename(abspath(get_terragrunt_dir()))
  secret_global_vars = jsondecode(sops_decrypt_file(find_in_parent_folders("global-sensitive.tfvars.json","${get_parent_terragrunt_dir()}/config/global-sensitive.tfvars.json")))
  secret_env_vars    = try(jsondecode(sops_decrypt_file("${get_terragrunt_dir()}/${local.workspace_name}-sensitive.tfvars.json")), {})

  global_vars        = jsondecode(file(find_in_parent_folders("global.tfvars.json","${get_parent_terragrunt_dir()}/config/global.tfvars.json")))
  env_vars           = try(jsondecode(file("${get_terragrunt_dir()}/${local.workspace_name}.tfvars.json")), {})

  config_map         = merge(local.secret_global_vars,local.secret_env_vars,local.global_vars,local.env_vars)

  compute_common     = lookup(local.global_vars,"compute", {})
  compute_env        = lookup(local.env_vars,"compute", {})
  storage_common     = lookup(local.global_vars,"storage", {})
  storage_env        = lookup(local.env_vars,"storage", {})
  networking_common  = lookup(local.global_vars,"networking", {})
  networking_env     = lookup(local.env_vars,"networking", {})
  settings_common    = lookup(local.global_vars,"settings", {})
  settings_env       = lookup(local.env_vars,"settings", {})
  security_common    = lookup(local.global_vars,"security", {})
  tags_env           = lookup(local.env_vars,"tags", {})
  tags_common        = lookup(local.global_vars,"tags", {})
  security_env       = lookup(local.env_vars,"security", {})
  final_tags         =  join("", [for key, value in local.config_map.tags : "\"${key}\"=\"${value}\"\n"])
  name_prefix        = lookup(local.config_map,"name_prefix", "")
  source_url         = "git::https://github.cadence.com/IT/terraform-openstack-chamber.git//modules/baremetal_only"
  release            = "feature/baremetal-only"
  openstack_region   = lookup(local.config_map, "openstack_region", "")
}

generate "provider" {
  path      = "provider.tf"
  if_exists = "overwrite"
  contents  = <<EOF
terraform {
  required_version =  "${local.config_map.TF_VERSION}"

  required_providers {
    openstack = {
      source = "terraform-provider-openstack/openstack"
      version = "2.0.0"
    }
  }
}

provider "openstack" {
  user_name   = "${local.config_map.openstack.username}"
  tenant_id   = "${local.config_map.openstack_project_id}"
  password    = "${local.config_map.openstack.password}"
  auth_url    = "${local.config_map.openstack.openstack_auth_url}"
  region      = "${local.config_map.openstack_region}"
}
EOF
}

remote_state {
  backend = "s3"
  generate = {
    path      = "backend.tf"
    if_exists = "overwrite"
  }
  config = {
    bucket         = "cloud30-chambers-terraform-state"
    key            = "cloud30-openstack-chambers/${path_relative_to_include()}/terraform.tfstate"
    region         = "us-west-2"
    encrypt        = true
    dynamodb_table = "cloud30-terraform-locks"
  }
}

terraform {
  source = "${local.source_url}?ref=${local.release}"

  extra_arguments "disable_input" {
    commands  = get_terraform_commands_that_need_input()
    arguments = ["-input=false"]
  }

  extra_arguments "retry_lock" {
    commands  = get_terraform_commands_that_need_locking()
    arguments = ["-lock-timeout=5m"]
  }
}

inputs = merge(
  local.global_vars,
  local.env_vars,
  local.compute_common,
  local.compute_env,
  local.storage_common,
  local.storage_env,
  local.networking_common,
  local.networking_env,
  local.secret_global_vars,
  local.secret_env_vars,
  {
    compute_common      = local.compute_common,
    compute_env         = local.compute_env,
    storage_common      = local.storage_common,
    storage_env         = local.storage_env,
    networking_common   = local.networking_common,
    networking_env      = local.networking_env,
    settings_common     = local.settings_common,
    settings_env        = local.settings_env,
    security_common     = local.security_common,
    security_env        = local.security_env,
    tags_common         = local.tags_common,
    tags_env            = local.tags_env,
    env_dir             = path_relative_to_include(),
    openstack_auth_url  = local.config_map.openstack.openstack_auth_url,
    netapp_profile_name = local.config_map.netapp_credentials.profile_name,
    fsxn_profile_name   = local.config_map.fsxn_credentials.profile_name
  }
)
===================================================================================
locals {
  workspace_name     = basename(abspath(get_terragrunt_dir()))
  secret_global_vars = jsondecode(sops_decrypt_file(find_in_parent_folders("global-sensitive.tfvars.json","${get_parent_terragrunt_dir()}/config/global-sensitive.tfvars.json")))
  secret_env_vars    = try(jsondecode(sops_decrypt_file("${get_terragrunt_dir()}/${local.workspace_name}-sensitive.tfvars.json")), {})

  global_vars        = jsondecode(file(find_in_parent_folders("global.tfvars.json","${get_parent_terragrunt_dir()}/config/global.tfvars.json")))
  env_vars           = try(jsondecode(file("${get_terragrunt_dir()}/${local.workspace_name}.tfvars.json")), {})

  config_map         = merge(local.secret_global_vars,local.secret_env_vars,local.global_vars,local.env_vars)

  compute_common     = lookup(local.global_vars,"compute", {})
  compute_env        = lookup(local.env_vars,"compute", {})
  storage_common     = lookup(local.global_vars,"storage", {})
  storage_env        = lookup(local.env_vars,"storage", {})
  networking_common  = lookup(local.global_vars,"networking", {})
  networking_env     = lookup(local.env_vars,"networking", {})
  settings_common    = lookup(local.global_vars,"settings", {})
  settings_env       = lookup(local.env_vars,"settings", {})
  security_common    = lookup(local.global_vars,"security", {})
  security_env       = lookup(local.env_vars,"security", {})
  tags_env           = lookup(local.env_vars,"tags", {})
  tags_common        = lookup(local.global_vars,"tags", {})

  final_tags         = join("", [for key, value in local.config_map.tags : "\"${key}\"=\"${value}\"\n"])
  name_prefix        = lookup(local.config_map,"name_prefix", "")
  source_url         = "git::https://github.cadence.com/IT/terraform-openstack-chamber.git//modules/baremetal_only"
  release            = "feature/baremetal-only"
  openstack_region   = lookup(local.config_map, "openstack_region", "")

  # ✅ Add this block to unify compute into a single input variable `compute`
  compute_combined = {
    compute_details = {
      node_details = concat(
        lookup(local.compute_common, "compute_details", {}).node_details,
        lookup(local.compute_env, "compute_details", {}).node_details
      )
    }
  }
}

generate "provider" {
  path      = "provider.tf"
  if_exists = "overwrite"
  contents  = <<EOF
terraform {
  required_version =  "${local.config_map.TF_VERSION}"

  required_providers {
    openstack = {
      source = "terraform-provider-openstack/openstack"
      version = "2.0.0"
    }
  }
}

provider "openstack" {
  user_name   = "${local.config_map.openstack.username}"
  tenant_id   = "${local.config_map.openstack_project_id}"
  password    = "${local.config_map.openstack.password}"
  auth_url    = "${local.config_map.openstack.openstack_auth_url}"
  region      = "${local.config_map.openstack_region}"
}
EOF
}

remote_state {
  backend = "s3"
  generate = {
    path      = "backend.tf"
    if_exists = "overwrite"
  }
  config = {
    bucket         = "cloud30-chambers-terraform-state"
    key            = "cloud30-openstack-chambers/${path_relative_to_include()}/terraform.tfstate"
    region         = "us-west-2"
    encrypt        = true
    dynamodb_table = "cloud30-terraform-locks"
  }
}

terraform {
  source = "${local.source_url}?ref=${local.release}"

  extra_arguments "disable_input" {
    commands  = get_terraform_commands_that_need_input()
    arguments = ["-input=false"]
  }

  extra_arguments "retry_lock" {
    commands  = get_terraform_commands_that_need_locking()
    arguments = ["-lock-timeout=5m"]
  }
}

inputs = merge(
  local.global_vars,
  local.env_vars,
  local.compute_common,
  local.compute_env,
  local.storage_common,
  local.storage_env,
  local.networking_common,
  local.networking_env,
  local.secret_global_vars,
  local.secret_env_vars,
  {
    # ✅ Fix added here
    compute              = local.compute_combined,
    compute_common       = local.compute_common,
    compute_env          = local.compute_env,
    storage_common       = local.storage_common,
    storage_env          = local.storage_env,
    networking_common    = local.networking_common,
    networking_env       = local.networking_env,
    settings_common      = local.settings_common,
    settings_env         = local.settings_env,
    security_common      = local.security_common,
    security_env         = local.security_env,
    tags_common          = local.tags_common,
    tags_env             = local.tags_env,
    env_dir              = path_relative_to_include(),
    openstack_auth_url   = local.config_map.openstack.openstack_auth_url,
    netapp_profile_name  = local.config_map.netapp_credentials.profile_name,
    fsxn_profile_name    = local.config_map.fsxn_credentials.profile_name
  }
)
================================================================================

locals {
  workspace_name     = basename(abspath(get_terragrunt_dir()))
  secret_global_vars = jsondecode(sops_decrypt_file(find_in_parent_folders("global-sensitive.tfvars.json", "${get_parent_terragrunt_dir()}/config/global-sensitive.tfvars.json")))
  secret_env_vars    = try(jsondecode(sops_decrypt_file("${get_terragrunt_dir()}/${local.workspace_name}-sensitive.tfvars.json")), {})

  global_vars        = jsondecode(file(find_in_parent_folders("global.tfvars.json", "${get_parent_terragrunt_dir()}/config/global.tfvars.json")))
  env_vars           = try(jsondecode(file("${get_terragrunt_dir()}/${local.workspace_name}.tfvars.json")), {})

  config_map         = merge(local.secret_global_vars, local.secret_env_vars, local.global_vars, local.env_vars)

  compute_common     = lookup(local.global_vars, "compute", {})
  compute_env        = lookup(local.env_vars, "compute", {})

  # ✅ Safe node_details extraction
  compute_common_details = try(local.compute_common.compute_details.node_details, [])
  compute_env_details    = try(local.compute_env.compute_details.node_details, [])

  # ✅ Final compute object to be injected
  compute_combined = {
    compute_details = {
      node_details = concat(local.compute_common_details, local.compute_env_details)
    }
  }

  storage_common     = lookup(local.global_vars, "storage", {})
  storage_env        = lookup(local.env_vars, "storage", {})
  networking_common  = lookup(local.global_vars, "networking", {})
  networking_env     = lookup(local.env_vars, "networking", {})
  settings_common    = lookup(local.global_vars, "settings", {})
  settings_env       = lookup(local.env_vars, "settings", {})
  security_common    = lookup(local.global_vars, "security", {})
  security_env       = lookup(local.env_vars, "security", {})
  tags_common        = lookup(local.global_vars, "tags", {})
  tags_env           = lookup(local.env_vars, "tags", {})

  final_tags         = join("", [for key, value in local.config_map.tags : "\"${key}\"=\"${value}\"\n"])
  name_prefix        = lookup(local.config_map, "name_prefix", "")
  source_url         = "git::https://github.cadence.com/IT/terraform-openstack-chamber.git//modules/baremetal_only"
  release            = "feature/baremetal-only"
  openstack_region   = lookup(local.config_map, "openstack_region", "")
}

generate "provider" {
  path      = "provider.tf"
  if_exists = "overwrite"
  contents  = <<EOF
terraform {
  required_version = "${local.config_map.TF_VERSION}"

  required_providers {
    openstack = {
      source  = "terraform-provider-openstack/openstack"
      version = "2.0.0"
    }
  }
}

provider "openstack" {
  user_name   = "${local.config_map.openstack.username}"
  tenant_id   = "${local.config_map.openstack_project_id}"
  password    = "${local.config_map.openstack.password}"
  auth_url    = "${local.config_map.openstack.openstack_auth_url}"
  region      = "${local.config_map.openstack_region}"
}
EOF
}

remote_state {
  backend = "s3"
  generate = {
    path      = "backend.tf"
    if_exists = "overwrite"
  }
  config = {
    bucket         = "cloud30-chambers-terraform-state"
    key            = "cloud30-openstack-chambers/${path_relative_to_include()}/terraform.tfstate"
    region         = "us-west-2"
    encrypt        = true
    dynamodb_table = "cloud30-terraform-locks"
  }
}

terraform {
  source = "${local.source_url}?ref=${local.release}"

  extra_arguments "disable_input" {
    commands  = get_terraform_commands_that_need_input()
    arguments = ["-input=false"]
  }

  extra_arguments "retry_lock" {
    commands  = get_terraform_commands_that_need_locking()
    arguments = ["-lock-timeout=5m"]
  }
}

inputs = merge(
  local.global_vars,
  local.env_vars,
  local.compute_common,
  local.compute_env,
  local.storage_common,
  local.storage_env,
  local.networking_common,
  local.networking_env,
  local.secret_global_vars,
  local.secret_env_vars,
  {
    compute              = local.compute_combined,
    compute_common       = local.compute_common,
    compute_env          = local.compute_env,
    storage_common       = local.storage_common,
    storage_env          = local.storage_env,
    networking_common    = local.networking_common,
    networking_env       = local.networking_env,
    settings_common      = local.settings_common,
    settings_env         = local.settings_env,
    security_common      = local.security_common,
    security_env         = local.security_env,
    tags_common          = local.tags_common,
    tags_env             = local.tags_env,
    env_dir              = path_relative_to_include(),
    openstack_auth_url   = local.config_map.openstack.openstack_auth_url,
    netapp_profile_name  = local.config_map.netapp_credentials.profile_name,
    fsxn_profile_name    = local.config_map.fsxn_credentials.profile_name
  }
)

